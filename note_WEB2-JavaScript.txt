- HTML : 정적 (정보)

① js : 동적 (기능)  자바스크립트는 사용자와 상호작용을 하는 언어이다.
(사용자와 상호작용하는 기능을 추가한 웸페이지. 사용자의 조작에 반응해서 움직이는)

② - 웹브라우저 : 한번 화면에 출력되면 자기자신을 바꿀 수 있는 능력이 없다. ( => js가 해줌)

=> ☆  자바스크립트는 html을 제어하는 언어다.

- 브라우저 오른쪽버튼 검사 Elements(태그) : 웹페이지를 구성하는 HTML태그들이 보임

- 수업의 목적 : 야간모드/주간모드를 버튼을 통해서 바꾸는 기능

- event : 웹브라우저 위에서 일어나는 일들

- onclick : 어떤 이벤트가 일어났을 때 어떠한 JS가 실행되도록 하는것

- 'Hello World'.indexOf('o')
= 4 // 0부터 시작

- 변수(variable) : 바뀔 수 있는 어떤 값
  상수(constant) : 항상 상. 바뀌지 않는다
- x = 1
대입연산자 : 오른쪽 항의 값을 왼쪽의 변수에 대입한다.

- query : 웹브라우저에게 질의한다.
selector : css의 셀렉터

- HTML, Javascript : 컴퓨터언어

Javascript : 컴퓨터언어 이면서 동시에 컴퓨터 '프로그래밍' 언어

프로그램 : 순서

프로그래밍 : 순서를 만드는 행위

프로그래머 : 순서를 만드는 사람

- 프로그램의 본질적인 의미 : 시간의 순서에 따라서 실행되어야 할 기능을 프로그래밍 언어의 문법에 맞게 글로 적어두는 방식을 고안한것.

그리고 그 작업이 필요할 떄 적어뒀던 글을 컴퓨터에게 내밀면서 이걸 실행해줘. 라고 하면 컴퓨터를 그 일을 하겠죠.

- HTML : 웹페이지를 묘사하는 목적의 언어이기 때문에 시간의 순서 필요x

JavaScript : 사용자와 상호작용하기 위해서 고안된 컴퓨터 언어이기 때문에 시간의 순서 필요o
시간의 순서에 따라 웹브라우저의 여러 기능이 실행되어야 하기 때문에 프로그래밍 이라는 형태를 띄고 있음.

- 리팩토링(Refactoring) : 다시 공장 -> 다시 공장으로 보내서 개선한다 는 느낌 ☆중복의 제거☆
동작하는 내용은 똑같지만 코드를 효율적으로 하는 것. (수단 : 함수)

- this : 이 코드가 속해있는 태그를 가르키도록 약속되어있는 특수한 키워드 (자기자신)

- 
// 이 웹페이지에 있는 모든 <a>태그를 가져온 다음

// 그 <a>태그 하나하나에 대해서 반복적으로 파우더블루 컬러를 지정한다

- if(true or false)
=
while(true or false)

while(true) : false가 될때까지 반복적으로 실행

- 반복문 : 순서대로 실행되는 프로그램의 실행 순서의 흐름을 제어하는 제어문. (if문 조건문과 함께!)

- 2줄의 코드가 몇번 실행됐는지를 어딘가에 적어 놓을 필요가 있음. 관습적으로 변수i 에!

반복문이 실행될 때 마다 i의 값을 1씩 증가시킴.

i는 기존의 i의값에 1을 더한 결과를 i의 새로운 값으로 준다는 뜻.

- 배열 : 순서대로 서로 연관된 데이터들을 잘 정리정돈하는(담는) 방법
배열의 항목 : element(원소)

- 반복문 : 순서대로 배열에 담겨있는 데이터를 하나씩 꺼내서 자동화된 처리를 할 수 있는 문법.

- 배열&반복문 : 환상의 콤비

- 함수 : 수납상자
입력 : parameter(매개변수) argument(인자)
출력 : return

function sum(left, right) { // 파라미터(매개변수)
            document.write(left+right + '<br>'); //
        }
        sum(2,3);

아규먼트(인자) : 함수로 전달하는 값(2,3)
파라미터(매개변수) : 값을 받아서 함수 안으로 매개해주는 변수 (left, right)

리턴 : 돌려준다. 값을 돌려준다.
매개변수를 통해 들어간 값을 return을 통해 출력함으로써 다양한 용도로 함수를 활용할 수 있게 됨

- 표현식 (expression) : 

1+1은 숫자 2에 대한 표현식
1===1은 true라는 값에 대한 표현식


- 객체(Object)

코드가 많아지면 코드를 잘 정리정돈하게 위해 함수를 씀.
함수가 많아지고, 그 함수와 연관되어있는 변수들이 많아지면 복잡도의 한계에 도달.

객체 : 한계상황에서 서로 연관된 함수와 서로 연관된 변수를 같은 이름으로 그룹핑해서 잘 정리정돈 하기 위한 도구

-      document.querySelector('body').style.backgroundColor = color;
      // document : 객체 , querySelector: 객체에 속해있는 함수
      // 객체에 속해있는 함수 : 함수x 메소드(method)o
      
- 배열 : 순서있이 정보를 저장 [] 대괄호
  객체 : 순서없이 정보를 저장 {} 중괄호

- 객체를 만드는 방법
        <script>
            var coworkers = {
                "programmer" : "egoing",
                "designer" : "leezche"
            };
        </script>

coworkers 라고 하는 변수에 객체를 담음.
객체를 만들 때 사용하는 기호 : {} (object literal)
{ "정보에 대한 이름" : "정보" }

coworkers 라는 객체에
egoing이라는 정보를
programmer라는 딱지를 붙여서 저장한 것.

- 객체를 꺼낼 때 ( 만들어져있는 객체에서 데이터를 가져오는 방법)
            document.write("programmer : "+coworkers.programmer);
            document.write("designer : "+coworkers.designer);
. : object access operator ( 객체에 접근하는 오퍼레이터 )

- 이미 객체가 만들어진 다음에 정보를 추가하는 방법

            coworkers.bookkeeper = "duru";
            document.write("bookkeeper : "+coworkers.bookkeeper+"<br>");
            coworkers["data scientist"] = "taeho"; // 이름에 공백을 넣을 수 없음. 배열에서 정보가져올 때 쓰는 [] 를 씀
            document.write("data scientist : "+coworkers["data scientist"]+"<br>");

- Iterate : 반복

- 생성된 객체에 어떤 데이터가 있는지를 모조리 다 가져와야하는 경우. 반복문.

-         for(var key in coworkers) {
            
        }

: corworkers 라는 변수가 가리키는 객체에 있는 key 값들을 가져오는 반복문

for : corworkers 에 있는 키를 하나하나 꺼내 중괄호에 있는 코드를 실행해주는 명령어

(key : 우리가 가져오고 싶은 정보에 도달할 수 있는 열쇠 (= 배열 : index 순서o))

데이터에 있는 수만큼 중괄호의 코드들이 실행 : 반복문

        for(var key in coworkers) {
            // document.write(key+"<br>"); // 키값이 반복
            // document.write(coworkers[key]+"<br>"); // 값이 반복 (=배열[인덱스])
            document.write(key+' : '+coworkers[key]+"<br>");
        }

- 객체에는 데이터를 담을 수 있음 (문자, 숫자, 배열, '함수'='메소드' 등등)

-             coworkers.showAll = function() {
            }
=
               function showAll() {
            }

-             coworkers.showAll = function() {
                // showAll 을 하면 coworkers에 있는 모든 데이터들을 iterate(반복)해서 화면에 출력하는 코드를 넣음
                document.write(key+' : '+coworkers[key]+"<br>");
            }

☆ - this : 함수 안에서 함수가 소속된 객체를 가리키는 약속된 기호

- 객체에 소속된 변수의 값으로 함수를 지정할 수 있고
= 객체에 소속된 함수(메소드. 여기서는 showAll)를 만들 수 있음
객체에 소속된 변수(프로퍼티. 여기서는 programmer, designer, bookkeeper, data scientist )

- 서로 연관된 코드들을 파일로 묶어서 그룹핑

- cache(캐시) : 저장한다

- jQeury

- UI : User Interface

- API : Application Programming Interface (ex alert)

- document객체
 DOM document 객체는 DOM(Document Object Model)의 일부
 window객체
 ajax
 cookie
 offline web application
 webRTC
 speech
 webGL
 webVR
...

--------------------

스코프 : 자바스크립트에서 변수를 선언하고, 그 변수를 사용할 때 적용되는 범위
변수가 어디까지 유효한지 그 범위를 가리키는 말.

호이스팅 : 끌어올린다

let변수 : 블럭변수. 스코프가 블럭에 국한되어 있음


var변수 : 변수 재선언o 호이스팅o

let변수 : 변수 재선언x 호이스팅x


☆익명함수, 화살표함수 연습

--------------------

돔 (DOM : Document Object Model) : 브라우저에서 자바스크립트로, html요소를 제어할 수 있도록 제공하는 API(언어 자체가 아닌, 브라우저에서 제공하는 기능같은것)
