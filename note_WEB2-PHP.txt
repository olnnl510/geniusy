- 웹페이지를 찍어내는 거대한 공장 php

- bitnami WAMP (Windows윈도우, Apachi웹서버, MySQL데이터베이스,시스템 PHP)

- html : 정적
php : 동적

- 정수{ (자연수 (1,2,3,4,5...) , 0 , 음수 (-1, -2, -3...) } : integer 인티저

- 실수{소숫점} : float 플로트

- 연산자 (operator) : 숫자를 가공(연산)할때 사용하는 약속된 기호들 (ex +)

- 표현식 : 컴퓨터 언어가 실행된 후에 어떤 값으로 바뀌는 것들

(ex 1+1 은 숫자 2에 대한 표현식)

- 산술 연산자 (arithmetic operator) : 수학적인(산술적인) 계산에 사용되는 연산자

- 문자열 : string 스트링 (문자가 모여있다)

- literal : 데이터를 언어에서 표현할 때 사용하는 기호들

-'' 싱글 쿼츠
-"" 더블 쿼츠

- 변수(variable)

-
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  </head>
  <body>
    안녕하세요. <?php echo $_GET['address']; ?>에 사시는 <?php echo $_GET['name']; ?>님
  </body>
</html>

- localhost/parameter.php?name=윤정인&address=서울
url 에서 ? 뒤부터 : 어떠한 입력값(=파라미터)들이 옴
& :  입력값과 입력값 구분자 (입력값 추가)

☆ - $_GET['name'];
url로 넘어온 name의 값 (에 해당하는 php에서 약속된 특수한 이름의 변수)

- 프로그램을 만드는 프로그래밍

- 프로그래밍 : 어떤 목적한 의도에 따라서 함수들을 시간의 순서에 따라서 실행되도록 코드를 작성하는 행위

- 함수 : 프로그래밍의 기본적인 원자 또는 부품

- WEB2-PHP-8.2. 함수의 활용 (에러)

- 프로그램 : 순서 의미

일을한다 : 일을 이루고 있는 '작업'들, 그 일을 '시간의 순서'에 따라 실행하는것

컴퓨터를 통해서 일을 한다 : 컴퓨터가 갖고 있는 기본적인 기능들을
우리가 하고자 하는 일의 목적에 따라 시간의 순서에 따라서 실행 하는것

- 반복=> 자동화

-코드를 위에서부터 아래로 쭉 써 내려 간다
= 시간의 순서에 따라서 그 코드가 가리키는 기능들이 실행되게 되는것

- 조건문 : 시간의 순서에 따라서 코드가 실행이 되다가 어떤 조건에 따라서 서로 다른 시간의 순서의 흐름에 따른 작업이 실행되도록 하는것

- 반복문 : 시간의 순서에 따라서 기능이 진행되다가 어떠한 조건을 만족하는 동안 어떠한 작업들이 반복적으로 실행되게 하는것.

(컴퓨터는 기본적으로 시간의 순서에 따라서 실행되는데,

조건문 : 그 흐름을 제어해서 조건에 따라서 다르게 동작하게 하는것.

반복문 : 반복해서 동작하게 하는것.)

- 조건문, 반복문 = 제어문! (컴퓨터가 갖고있는 시간의 순서의 흐름을 제어한다는 측면에서)

- boolean : 새로운 데이터 타입 배운다!
integer : 숫자 (정수)
float : 숫자 (실수)
string : 문자열

- boolean : True or Flase. 2개의 타입으로 이루어져 있음.

- 비교연산자(comparison operators)

- boolean 데이터 타입과 비교연산자의 상관관계

비교연산자는 boolean(true or false) 이라는 데이터타입을 만들어낸다.

- var_dump(1);
int(1)
var_dump('11');
string(2) "11"
var_dump함수 : 입력값의 데이터 타입까지 출력해줌

- expr : expression 표현식(값이 온다)

- if(true or flase = boolean data type){실행되어야 할 코드}

- expression : 값이 오는것. 최종적으로 값이 되는것 (ex 1, 1+1)
statement : 문법(ex if문)

- while (expr)
statement

: while 반복문 : 트루면 실행 트루 실행 트루 실행 반복..... 펄스 실행x 까지!
: 조건이 만족되는 동안 반복적으로 실행(loop루프)
: while : ~하는 동안에

- 배열(array) : 서로 연관된 데이터를 담는 그릇으로써 배열이 쓰인다. 수납. 정리정돈.

- 배열의 형식 :

array (
key => value,
key2 => value2,
key 3 => balue3,
...
)
키 값

- compound : 합체

- int : 정수

-scandir : scan directory
"scandir 이라는 함수"를 호출하는걸 통해서
data라고 하는 디렉토리 안에 있는 파일목록을 가져올 수 있고,
가져온 파일목록을 "배열"에 담아서 우리에게 준다.
("파일목록이 담겨있는 배열을 돌려받을 수 있었음)

- ./ : 현재 디렉토리
../ : 부모 디렉토리

- 내장함수 : built-in function

- 사용자가 정의한 함수 : User-defined functions

- 함수 : 코드 재사용, 로직에 이름을 부여

- 함수에 입력값을 주면, 함수는 입력값을 받아서 내부적으로 다르게 동작하게 개선할수 있게됨
- 함수(statement)로 들어오는 입력값
parameter, argument

ex)

function sum($left, $right) {
	print($left+$right);
	print("<br>");
	}
sum(2,4);
sum(4,6);

☆ : $left, $right 변수 : parameter(파라미터,매개변수) 입력값을 받아서 함수 안에서"만" 사용되는것
☆ : 2,4 4,6 (구체적인 입력값(표현식)) : argumet(아규먼트) 입력한 실제값

☆ 입력값 : parameter(파라미터, 매개변수) / argument(아규먼트)
☆ 출력값 : return (return을 만나는 순간 함수는 종료 돼버림. 밑에 무시됨.)



- 함수 정의
function 함수의이름(파라미터1, 파라미터2){
return 최종적으로 작업한 결과(함수를 실행한결과. 표현식)
}

- 함수 : 정리정돈을 위한 (마법의) 수납상자다.

- 정보시스템의 핵심 : 입력과 출력

 ex) 글쓰는 플랫폼 : 글을쓰는것 , 글을 화면에 표현해주는게 본질

- Create
Read
Update
Delete

☆ - form : 사용자의 정보를 서버쪽으로 전송할 때 사용하는 기능

☆ - input : 사용자로부터 정보를 입력받는 html태그

- submit : 제출하다

- 숫자 대신 문자로 이름을 줄수있는 배열 : 연관배열

ex) $_GET['title'];

- form 태그 : 사용자가 입력하 정보를 url 파라미터로 만들어내는 기계

- 서버로 데이터를 전송할 때
(method 지정하지않으면 기본값 get)
get방식 : url의 파라미터를 통해서 데이터가 전송됨
북마크 용도로 적합. 데이터 추가 수정 삭제할때는 부적합

post방식

- 리다이렉션 : (웹브라우저의 기능)
사용자를 다른페이지(다른방향)로 보낼 수 있음.

- isset : 인자로 들어오는 값이 있는지 없는지를 체크하는 것

- value : 기본값을 설정하는 것

- input type="hidden" : 사용자에게는 노출하지 않으면서, submit 버튼을 눌렀을 때
action이 가리키는 애플리케이션으로 어떠한 데이터를 전송하고 싶을 때 쓰는것

- 리팩토링 : 공장에 재입고 시킨다.
기능은 그대로 두고 내부적인 코드를 훨씬 더 보기 좋게 하는 작업들.	
유지보수하게 편하게 "중복된 코드를 제거"하는 등 이러한 작업들의 과정.
(처음부터 이상적인 형태의 코드를 짤 순 없기 때문에 리팩토링 계속해서 반복하며
코드를 더 효율적으로 만드는 작업을 끊임없이 해나가야함)

- lib(library) : 도서관. 재사용할 가능성이 있는것들을 잘 정리정돈한 것.
(재사용할 수 있는 로직들)

- view : 보여지는것 관련

- require : php를 외부로 꺼내는것.

- redeclare : 중복해서 선언됨.
php에서 한번 만들어진 함수는 다시 재정의할 수 없도록 되어있음.

- require_once : 중복해서 호출되는 것을 방지함.
(같은 함수 두번 선언 : 에러)

- XSS : Cross Site Scripting (보안문제)
우리가 웹애플리케이션을 운영할 때 아주 큰 위협을 차단하는 방법.
핵심 : 사용자가 입력한 정보를 무조건 불신하라!

웹사이트에다가 스크립트 태그를 주입하는것.

- 스크립트 태그 :  자바스크립트 라는 컴퓨터 언어를 웹브라우저에서 실행하는 코드

- &lt : <

&gt: >

- 보안 파일 경로 보호 : URL을 이용해서 공격.

- http://localhost/mfws-php/index.php?id=../password.txt

../ : 현재위치의 부모디렉토리

- basename : php 함수 중 파일의 경로에서 파일명만을 추출해주는 함수

- F12 개발자도구 -> 검사 -> Network -> Preserve log : 서버랑 주고받는 정보들을 지우지않고 계속 쌓아둘 수 있음.
ex) 삭제버튼을 누르면 서버와 어떤 데이터를 어떤 방식으로 주고받는지를 알 수 있음

- UI vs API

UI (User Interface) : 애플리케이션을 사용하는 사람들이 접하게 되는 모든것
ex) 링크, 폼, 시각적으로 눈에 보이는 text
사용자는 ui를 통해서 시스템을 조작하고 시스템이 제공하는 정보를 볼 수 있음

API (Application Programming Interface) : 애플리케이션을 만들 때 모든것을 처음부터 끝까지 혼자 만들지 않음.
a태그, scandir과 같은 명령/함수/태그 들

애플리케이션을 만든다는 것 : 컴퓨터언어의 문법에 따라서 기반이되는 시스템 (웹브라우저, php 등)이
제공하는 api를 호출하는 것.

api : 부품

언어의 문법 : 그 부품을 결합해서 새로운 기능을 만들어내도록 해주는 결합 방법

- php 컴퍼저
= 패키지 관리자 (패키지 매니저)

패키지 : 소프트웨어 안에서 사용하는 작은 부품이되는 소프트웨어(소프트웨어 자체o)

- Packagist : 필요한것이 있을때 검색해봄.

- 현대적인 애플리케이션에서 소프트웨어를 만드는 기본적인 방법 :
소프트웨어를 혼자서 처음부터 끝까지 다 만드는 것이 아니라
다른사람이 만든 소프트웨어를 부품으로 해서 레고블럭처럼 조립해서 소프트웨어를 만들가는것.

- 제품군 / 제품명

- "쿠키" (브라우저의 기능) : 사이트에 접속하는 각각의 접속자들을 식별할 수 있음.
보안상 문제 있으므로 사용자인증시 쿠키 보다 "세션"을 통해서 구현. (사용자 관리)

- 타사 인증 federation authentication (ex 페이스북으로 로그인. 페이스북의 타사인증을 사용하는 방법) :
facebook login php
